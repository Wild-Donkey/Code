#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <map>
#include <queue>
#include <string>
#include <vector>
using namespace std;
int n, a[105], ans(0x3f3f3f3f),
    Len(0), Sum[105][10], Ten[7] = {0, 9, 99, 999, 9999, 99999, 999999},
                          Lenn(0), cnt(0);
bool flg;
char ch;
char s[105];
inline int RD() {
  char ich = getchar();
  int intmp = 0, insign = 1;
  while (((ich < '0') || (ich > '9')) && ((ich != '-'))) {
    ich = getchar();
  }
  if (ich == '-') {
    insign = -1;
    ich = getchar();
  }
  while ((ich <= '9') && (ich >= '0')) {
    intmp *= 10;
    intmp += ich - '0';
    ich = getchar();
  }
  return intmp * insign;
}
void Get() {
  while ((s[Len] >= '0') && (s[Len] <= '9')) {
    a[Len + 1] = s[Len] - '0';
    // printf("%d %d\n", Len + 1, a[Len + 1]);
    ++Len;
  }
  memset(Sum, 0, sizeof(Sum));
  for (register int len(0); len < Lenn; ++len) {
    for (register int l(1); l + len <= Len; ++l) {
      Sum[l][len] = Sum[l][len - 1] * 10 + a[l + len];
    }
  }
  return;
}
void DFS(int Dep, int Loca,
         int Val) {  //第Dep个加号放在第Loca位后面, 前Loca位价值为Val
                     // if (Dep <= 3) {
  // printf("DFS:%d %d %d\n", Dep, Loca, Val);
  //}
  if (Loca == 3) {
    Loca = 3;
  }
  ++cnt;
  if (Len - Loca <= Lenn) {
    if (Val + Sum[Loca + 1][Len - Loca - 1] == n) {
      ans = min(ans, Dep);
      return;
    }
  }
  if (Dep >= ans - 1) {
    return;
  }
  if (Loca == Len - 1) {
    return;
  }
  if (Val > n) {
    return;
  }
  for (register int i(0); Loca + 1 + i <= min(Len - 1, Loca + Lenn); ++i) {
    if (Sum[Loca + 1][i] == 0) {
      DFS(Dep, Loca + 1 + i, Val + Sum[Loca + 1][i]);
    } else {
      DFS(Dep + 1, Loca + 1 + i, Val + Sum[Loca + 1][i]);
    }
  }
  return;
}
int main() {
  freopen("P1874.in", "r", stdin);
  freopen("P1874.out", "w", stdout);
  gets(s);
  n = RD();
  if (n == 0) {
    printf("0\n");
    return 0;
  }
  while (n > Ten[Lenn]) {
    ++Lenn;
  }
  Get();
  /*for (register int i(1); i <= Len; ++i) {
    for (register int j(0); j < Lenn; ++j) {
      printf("%d ", Sum[i][j]);
    }
    printf("\n");
  }*/
  DFS(0, 0, 0);
  if (ans < 0x3f3f3f3f) {
    printf("%d\n", ans);
  }
  if (ans == 0x3f3f3f3f) {
    printf("-1\n");
  }
  // printf("cnt = %d", cnt);
  // system("pause");
  // fclose(stdin);
  // fclose(stdout);
  return 0;
}
/*
99999
45

4

4307380002313411526566560222902930
741846

6

+4307+3800+02+31+3+41152+656+656022+29029+30
4 1   4 5   1 6
1 1 4    1 2 3    1 3 0    1 4 7    1 5 3    1 6 8    1 7 0    1 8 0    1 9 0 1
10 2    1 11 3    1 12 1    1 13 3    1 14 4    1 15 1    1 16 1    1 17 5    1
18 2    1 19 6    1 20 5    1 21 6    1 22 6    1 23 5    1 24 6    1 25 0    1
26 2    1 27 2    1 28 2    1 29 9    1 30 0    1 31 2    1 32 9    1 33 3    1
34 0 2 1 43    2 2 30    2 3 7    2 4 73    2 5 38    2 6 80    2 7 0    2 8 0
2 9 2    2 10 23    2 11 31    2 12 13    2 13 34    2 14 41    2 15 11    2 16
15    2 17 52    2 18 26    2 19 65    2 20 56    2 21 66    2 22 65    2 23 56
2 24 60    2 25 2    2 26 22    2 27 22    2 28 29    2 29 90    2 30 2    2 31
29    2 32 93    2 33 30 3 1 430    3 2 307    3 3 73    3 4 738    3 5 380    3
6 800    3 7 0    3 8 2    3 9 23    3 10 231    3 11 313    3 12 134    3 13
341    3 14 411    3 15 115    3 16 152    3 17 526    3 18 265    3 19 656    3
20 566    3 21 665    3 22 656    3 23 560    3 24 602    3 25 22    3 26 222 3
27 229    3 28 290    3 29 902    3 30 29    3 31 293    3 32 930 4 1 4307    4
2 3073    4 3 738    4 4 7380    4 5 3800    4 6 8000    4 7 2    4 8 23    4 9
231    4 10 2313    4 11 3134    4 12 1341    4 13 3411    4 14 4115    4 15
1152    4 16 1526 4 17 5265    4 18 2656    4 19 6566    4 20 5665    4 21 6656
4 22 6560    4 23 5602    4 24 6022    4 25 222    4 26 2229    4 27 2290    4
28 2902    4 29 9029    4 30 293    4 31 2930

5 1 43073    5 2 30738    5 3 7380    5 4 73800    5 5 38000    5 6 80002    5 7
23    5 8 231    5 9 2313    5 10 23134    5 11 31341    5 12 13411    5 13
34115    5 14 41152    5 15 11526 5 16 15265    5 17 52656    5 18 26566    5 19
65665    5 20 56656    5 21 66560    5 22 65602    5 23 56022    5 24 60222    5
25 2229    5 26 22290    5 27 22902    5 28 29029    5 29 90293    5 30 2930 6 1
430738    6 2 307380    6 3 73800    6 4 738000    6 5 380002    6 6 800023    6
7 231    6 8 2313    6 9 23134    6 10 231341    6 11 313411    6 12 134115    6
13 341152    6 14 411526 6 15 115265    6 16 152656    6 17 526566    6 18
265665    6 19 656656    6 20 566560    6 21 665602    6 22 656022    6 23
560222    6 24 602229    6 25 22290    6 26 222902    6 27 229029    6 28 290293
6 29 902930 7 1 4307380    7 2 3073800    7 3 738000    7 4 7380002    7 5
3800023    7 6 8000231    7 7 2313    7 8 23134    7 9 231341    7 10 2313411 7
11 3134115    7 12 1341152    7 13 3411526 7 14 4115265    7 15 1152656    7 16
1526566    7 17 5265665    7 18 2656656    7 19 6566560    7 20 5665602    7 21
6656022    7 22 6560222    7 23 5602229    7 24 6022290    7 25 222902    7 26
2229029    7 27 2290293    7 28 2902930 8 1 43073800    8 2 30738000    8 3
7380002    8 4 73800023    8 5 38000231    8 6 80002313    8 7 23134    8 8
231341    8 9 2313411    8 10 23134115    8 11 31341152    8 12 13411526    8 13
34115265    8 14 41152656    8 15 11526566    8 16 15265665    8 17 52656656 8
18 26566560    8 19 65665602    8 20 56656022    8 21 66560222    8 22 65602229
8 23 56022290    8 24 60222902    8 25 2229029    8 26 22290293    8 27 22902930
9 1 430738000    9 2 307380002    9 3 73800023    9 4 738000231    9 5 380002313
9 6 800023134    9 7 231341    9 8 2313411    9 9 23134115    9 10 231341152 9
11 313411526    9 12 134115265    9 13 341152656    9 14 411526566    9 15
115265665    9 16 152656656    9 17 526566560    9 18 265665602    9 19
656656022    9 20 566560222    9 21 665602229    9 22 656022290    9 23
560222902    9 24 602229029    9 25 22290293    9 26 222902930 10 1 4307380002
10 2 3073800023    10 3 738000231    10 4 7380002313    10 5 3800023134    10 6
8000231341    10 7 2313411    10 8 23134115    10 9 231341152    10 10
2313411526    10 11 3134115265    10 12 1341152656    10 13 3411526566    10 14
4115265665    10 15 1152656656    10 16 1526566560    10 17 5265665602    10 18
2656656022    10 19 6566560222    10 20 5665602229 10 21 6656022290    10 22
6560222902    10 23 5602229029    10 24 6022290293    10 25 222902930 11 1
43073800023    11 2 30738000231    11 3 7380002313    11 4 73800023134    11 5
38000231341    11 6 80002313411    11 7 23134115    11 8 231341152    11 9
2313411526    11 10 23134115265 11 11 31341152656    11 12 13411526566    11 13
34115265665    11 14 41152656656    11 15 11526566560    11 16 15265665602    11
17 52656656022    11 18 26566560222    11 19 65665602229    11 20 56656022290 11
21 66560222902    11 22 65602229029    11 23 56022290293    11 24 60222902930 12
1 -1    12 2 -1    12 3 73800023134    12 4 -1    12 5 -1    12 6 -1    12 7
231341152    12 8 2313411526    12 9 23134115265    12 10 231341152656    12 11
-1    12 12 134115265665    12 13 -1    12 14 -1    12 15 115265665602    12 16
152656656022    12 17 -1    12 18 265665602229    12 19 -1    12 20 -1    12 21
-1    12 22 -1    12 23 -1 13 1 -7    13 2 -6    13 3 -1    13 4 -9    13 5 -5
13 6 -8    13 7 2313411526    13 8 23134115265    13 9 231341152656    13 10 -1
13 11 -5    13 12 -1    13 13 -10    13 14 -8    13 15 -1    13 16 -1    13 17
-1    13 18 -1    13 19 -8    13 20 -1    13 21 -7    13 22 -10 14 1 -66    14 2
-59    14 3 -9    14 4 -85    14 5 -48    14 6 -74    14 7 23134115265    14 8
231341152656    14 9 -1    14 10 -5    14 11 -44    14 12 -10    14 13 -98    14
14 -78    14 15 -8    14 16 -1    14 17 -10    14 18 -8    14 19 -71    14 20 -7
14 21 -70 15 1 -659    15 2 -589    15 3 -85    15 4 -848    15 5 -474    15 6
-735    15 7 231341152656    15 8 -1    15 9 -5    15 10 -44    15 11 -440    15
12 -98    15 13 -978    15 14 -778    15 15 -71    15 16 -10    15 17 -98    15
18 -71    15 19 -707    15 20 -70 16 1 -6589    16 2 -5885    16 3 -848    16 4
-8474    16 5 -4735    16 6 -7344    16 7 -1    16 8 -5    16 9 -44    16 10
-440    16 11 -4398    16 12 -978    16 13 -9778    16 14 -7771    16 15 -710 16
16 -98    16 17 -971    16 18 -707    16 19 -7070 17 1 -65885    17 2 -58848 17
3 -8474    17 4 -84735    17 5 -47344    17 6 -73434    17 7 -5    17 8 -44 17 9
-440    17 10 -4398    17 11 -43978    17 12 -9778    17 13 -97771    17 14
-77710    17 15 -7098    17 16 -971    17 17 -9707    17 18 -7070 18 1 -658848
18 2 -588474    18 3 -84735    18 4 -847344    18 5 -473434    18 6 -734335 18 7
-44    18 8 -440    18 9 -4398    18 10 -43978    18 11 -439778    18 12 -97771
18 13 -977710    18 14 -777098    18 15 -70971    18 16 -9707    18 17 -97070 19
1 -6588474    19 2 -5884735    19 3 -847344    19 4 -8473434    19 5 -4734335 19
6 -7343344    19 7 -440    19 8 -4398    19 9 -43978    19 10 -439778    19 11
-4397771    19 12 -977710 19 13 -9777098    19 14 -7770971    19 15 -709707 19
16 -97070 20 1 -65884735    20 2 -58847344    20 3 -8473434    20 4 -84734335 20
5 -47343344    20 6 -73433440    20 7 -4398    20 8 -43978    20 9 -439778    20
10 -4397771    20 11 -43977710    20 12 -9777098    20 13 -97770971    20 14
-77709707    20 15 -7097070 21 1 -658847344    21 2 -588473434    21 3 -84734335
21 4 -847343344    21 5 -473433440    21 6 -734334398    21 7 -43978    21 8
-439778    21 9 -4397771    21 10 -43977710    21 11 -439777098    21 12
-97770971    21 13 -977709707    21 14 -777097070 22 1 -6588473434    22 2
-5884734335    22 3 -847343344    22 4 -8473433440    22 5 -4734334398    22 6
-7343343978    22 7 -439778    22 8 -4397771    22 9 -43977710    22 10
-439777098    22 11 -4397770971    22 12 -977709707    22 13 -9777097070 23 1
-65884734335    23 2 -58847343344    23 3 -8473433440    23 4 -84734334398    23
5 -47343343978    23 6 -73433439778    23 7 -4397771    23 8 -43977710    23 9
-439777098    23 10 -4397770971    23 11 -43977709707    23 12 -9777097070 24 1
-658847343344    24 2 -588473433440    24 3 -84734334398    24 4 -847343343978
24 5 -473433439778    24 6 -734334397771    24 7 -43977710    24 8 -439777098 24
9 -4397770971    24 10 -43977709707    24 11 -439777097070 25 1 -6588473433440
25 2 -5884734334398    25 3 -847343343978    25 4 -8473433439778    25 5
-4734334397771    25 6 -7343343977710    25 7 -439777098    25 8 -4397770971 25
9 -43977709707    25 10 -439777097070 26 1 -65884734334398    26 2
-58847343343978    26 3 -8473433439778    26 4 -84734334397771    26 5
-47343343977710    26 6 -73433439777098    26 7 -4397770971    26 8 -43977709707
26 9 -439777097070 27 1 -658847343343978    27 2 -588473433439778    27 3
-84734334397771    27 4 -847343343977710    27 5 -473433439777098    27 6
-734334397770971    27 7 -43977709707    27 8 -439777097070

28 1 -6588473433439778    28 2 -5884734334397771    28 3 -847343343977710    28
4 -8473433439777098    28 5 -4734334397770971    28 6 -7343343977709707    28 7
-439777097070 29 1 -65884734334397771    29 2 -58847343343977710    29 3
-8473433439777098    29 4 -84734334397770971    29 5 -47343343977709707    29 6
-73433439777097070 30 1 -658847343343977710    30 2 -588473433439777098    30 3
-84734334397770971    30 4 -847343343977709707    30 5 -473433439777097070 31 1
-6588473433439777098    31 2 -5884734334397770971    31 3 -847343343977709707 31
4 -8473433439777097070 32 1 -1    32 2 -3507111122849054859    32 3
-8473433439777097070 33 1 -7    33 2 -1 34 1 -70 -1

*/